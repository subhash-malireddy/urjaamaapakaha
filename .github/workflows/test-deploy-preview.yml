name: Run Tests and Deploy a preview to Vercel

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

# This workflow runs tests for pull requests and pushes to main
# Note: Linting is intentionally excluded as it's handled by pre-commit hooks locally
# using Husky and lint-staged before each commit

jobs:
  test-and-deploy-preview:
    runs-on: ubuntu-latest
    if: github.actor == 'subhash-malireddy'
    environment: preview
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      # Add OAuth environment variables
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      NEXTAUTH_URL: https://preview-subhash-malireddy-urjaamaapakaha.vercel.app
      NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      SPECIAL_DEVICE_IPS: ${{ secrets.SPECIAL_DEVICE_IPS }}

    steps:
      - uses: actions/checkout@v4

      # Install pnpm first without caching
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false

      # Then set up Node.js with pnpm caching
      # Note: The cache parameter here works with the pnpm action above
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "23"
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"

      # Now we can use pnpm to install dependencies
      - name: Install dependencies
        run: pnpm install

      # Linting step is intentionally omitted
      # Local development enforces linting via pre-commit hooks
      # This ensures all committed code is already properly linted

      # Determine Jest cache directory
      - name: Get Jest cache directory
        id: jest-cache-dir
        run: |
          JEST_CONFIG=$(pnpm jest --showConfig 2>/dev/null)
          CACHE_DIR=$(echo "$JEST_CONFIG" | jq -r '.configs.[0].cacheDirectory' 2>/dev/null)

          if [[ -z "$CACHE_DIR" ]]; then
            echo "Error: Could not determine Jest cache directory." >&2
            exit 1
          fi

          echo "dir=$CACHE_DIR" >> "$GITHUB_OUTPUT"

      # Restore Jest cache to speed up tests
      - name: Restore Jest cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.jest-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-jest-${{ hashFiles('**/jest.config.js') }}-${{ hashFiles('**/*.{js,jsx,ts,tsx}') }}
          restore-keys: |
            ${{ runner.os }}-jest-${{ hashFiles('**/jest.config.js') }}-
            ${{ runner.os }}-jest-

      # Run tests with coverage (no need to run tests twice)
      - name: Run tests with coverage
        run: pnpm test:coverage

      # # Save Jest cache after tests run
      # # Saves automatically when the workflow completes but if the above fails, this will save the cache
      # - name: Save Jest cache
      #   if: always() # Try to save cache even if tests fail
      #   uses: actions/cache/save@v4
      #   with:
      #     path: ${{ steps.jest-cache-dir.outputs.dir }}
      #     key: ${{ runner.os }}-jest-${{ hashFiles('**/jest.config.js') }}-${{ hashFiles('**/*.{js,jsx,ts,tsx}') }}

      # Upload coverage reports as artifacts
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

      # Deploy to Vercel (only on push to main)
      - name: Install Vercel CLI
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

          # Remove existing environment variables first
          vercel env rm GOOGLE_CLIENT_ID preview --yes --token=${{ secrets.VERCEL_TOKEN }} || true
          vercel env rm GOOGLE_CLIENT_SECRET preview --yes --token=${{ secrets.VERCEL_TOKEN }} || true
          vercel env rm NEXTAUTH_URL preview --yes --token=${{ secrets.VERCEL_TOKEN }} || true
          vercel env rm NEXTAUTH_SECRET preview --yes --token=${{ secrets.VERCEL_TOKEN }} || true
          vercel env rm ADMIN_EMAILS preview --yes --token=${{ secrets.VERCEL_TOKEN }} || true
          vercel env rm MEMBER_EMAILS preview --yes --token=${{ secrets.VERCEL_TOKEN }} || true
          vercel env rm DATABASE_URL preview --yes --token=${{ secrets.VERCEL_TOKEN }} || true
          vercel env rm URJ_FSFY_API preview --yes --token=${{ secrets.VERCEL_TOKEN }} || true
          vercel env rm URJ_FSFY_API_USER preview --yes --token=${{ secrets.VERCEL_TOKEN }} || true
          vercel env rm URJ_FSFY_API_PWD preview --yes --token=${{ secrets.VERCEL_TOKEN }} || true
          vercel env rm SPECIAL_DEVICE_IPS preview --yes --token=${{ secrets.VERCEL_TOKEN }} || true

          # Add environment variables using Vercel CLI without newlines
          printf "%s" "${{ secrets.GOOGLE_CLIENT_ID }}" > google_client_id.txt
          vercel env add GOOGLE_CLIENT_ID preview < google_client_id.txt --token=${{ secrets.VERCEL_TOKEN }}
          rm google_client_id.txt

          printf "%s" "${{ secrets.GOOGLE_CLIENT_SECRET }}" > google_client_secret.txt
          vercel env add GOOGLE_CLIENT_SECRET preview < google_client_secret.txt --token=${{ secrets.VERCEL_TOKEN }}
          rm google_client_secret.txt

          printf "%s" "https://preview-subhash-malireddy-urjaamaapakaha.vercel.app" > nextauth_url.txt
          vercel env add NEXTAUTH_URL preview < nextauth_url.txt --token=${{ secrets.VERCEL_TOKEN }}
          rm nextauth_url.txt

          printf "%s" "${{ secrets.NEXTAUTH_SECRET }}" > nextauth_secret.txt
          vercel env add NEXTAUTH_SECRET preview < nextauth_secret.txt --token=${{ secrets.VERCEL_TOKEN }}
          rm nextauth_secret.txt

          printf "%s" "${{ secrets.ADMIN_EMAILS }}" > admin_emails.txt
          vercel env add ADMIN_EMAILS preview < admin_emails.txt --token=${{ secrets.VERCEL_TOKEN }}
          rm admin_emails.txt

          printf "%s" "${{ secrets.MEMBER_EMAILS }}" > member_emails.txt
          vercel env add MEMBER_EMAILS preview < member_emails.txt --token=${{ secrets.VERCEL_TOKEN }}
          rm member_emails.txt

          printf "%s" "${{ secrets.DATABASE_URL }}" > database_url.txt
          vercel env add DATABASE_URL preview < database_url.txt --token=${{ secrets.VERCEL_TOKEN }}
          rm database_url.txt

          printf "%s" "${{ secrets.URJ_FSFY_API }}" > urj_fsfy_api.txt
          vercel env add URJ_FSFY_API preview < urj_fsfy_api.txt --token=${{ secrets.VERCEL_TOKEN }}
          rm urj_fsfy_api.txt

          printf "%s" "${{ secrets.URJ_FSFY_API_USER }}" > urj_fsfy_api_user.txt
          vercel env add URJ_FSFY_API_USER preview < urj_fsfy_api_user.txt --token=${{ secrets.VERCEL_TOKEN }}
          rm urj_fsfy_api_user.txt

          printf "%s" "${{ secrets.URJ_FSFY_API_PWD }}" > urj_fsfy_api_pwd.txt
          vercel env add URJ_FSFY_API_PWD preview < urj_fsfy_api_pwd.txt --token=${{ secrets.VERCEL_TOKEN }}
          rm urj_fsfy_api_pwd.txt

          printf "%s" "${{ secrets.SPECIAL_DEVICE_IPS }}" > special_device_ips.txt
          vercel env add SPECIAL_DEVICE_IPS preview < special_device_ips.txt --token=${{ secrets.VERCEL_TOKEN }}
          rm special_device_ips.txt

      - name: Build Project Artifacts
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Save stdout and stderr to files
          vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} >deployment-url.txt 2>error.txt

          # Check the exit code
          code=$?
          if [ $code -eq 0 ]; then
              # Get the deployment URL from stdout for the next step
              deploymentUrl=$(cat deployment-url.txt)
              echo "Deployed to $deploymentUrl"
              
              # Set a consistent alias for the deployment
              vercel alias $deploymentUrl preview-${{ github.repository_owner }}-${{ github.event.repository.name }}.vercel.app --token=${{ secrets.VERCEL_TOKEN }} --scope=${{secrets.VERCEL_TEAM_ID}}
          else
              # Handle the error
              errorMessage=$(cat error.txt)
              echo "There was an error: $errorMessage"
              exit 1
          fi
